#Eements
from pyopenms import *
edb=ElementDB()
edb.hasElement("O")
edb.hasElement("S")
oxygen =edb.getElement("O")
print(oxygen.getName())
print(oxygen.getSymbol())
print(oxygen.getMonoWeight())
print(oxygen.getAverageWeight())

sulfur=edb.getElement("S")
print(sulfur.getName())
print(sulfur.getSymbol())
print(sulfur.getMonoWeight())
print(sulfur.getAverageWeight())
isotope=sulfur.getIsotopeDistribution()
print("one mole of oxygen weighs",2*oxygen.getAverageWeight(),"gram")
print("one mole of oxygen weighs",2*oxygen.getMonoWeight(),"gram")

#Isotopes
edb = ElementDB()
o_isoDist={"mass":[],"abundance":[]}
s_isoDist={"mass":[],"abundance":[]}

oxygen= edb.getElement("O")
isotopes=oxygen.getIsotopeDistribution()
for iso in isotopes.getContainer():
    print("oxygen isotopes",iso.getMZ(),"has abundance",iso.getIntensity()*100,"%")
    o_isoDist["mass"].append(iso.getMZ())
    o_isoDist["abundance"].append((iso.getIntensity()*100))
    
sulfur= edb.getElement("S")
isotopes=sulfur.getIsotopeDistribution()
for iso in isotopes.getContainer():
    print("sulfur isotopes",iso.getMZ(),"has abundance",iso.getIntensity()*100,"%")
    s_isoDist["mass"].append(iso.getMZ())
    s_isoDist["abundance"].append((iso.getIntensity()*100))   
    
    import math
from matplotlib import pyplot as plt

def adjusttext(x1,y1,x2,y2):
    if y1>y2:
        plt.annotate('%0.3f' % (y2),xy=(x2,y2), xytext=(x2+0.5,y2+9), textcoords="data",
                    arrowprops=dict(arrowstyle="->",color="r",lw=0.5),
                    horizontalalign="right",verticalalign="top")
    else:
            plt.annotate('%0.3f' % (y1),xy=(x1,y1), xytext=(x1+0.5,y1+9), textcoords="data",
                    arrowprops=dict(arrowstyle="->",color="r",lw=0.5),
                    horizontalalign="right",verticalalign="top")

def plotdistribution(distribution):
    n=len(distribution["mass"])
    for i in range(0,n):
        plt.vlines(x=distribution["mass"][i],ymin=0, ymax=distribution["abundance"][i])
        if int(distribution["mass"][i-1]) == int(distribution["mass"][i])\
               and i!=0:     
            adjusttext(distribution["mass"][i-1],distribution["abundance"][i-1],
                      distribution["mass"][i],distribution["abundance"][i])
        else:
        
            plt.text(x=distribution["mass"][i],
                    y=(distribution["abundance"][i]+2),
                    s='%0.3f' % (distribution["abundance"][i]),va="center",
                    ha = "center")
    plt.ylim([0,110])
    plt.xticks(range(math.ceil(distribution["mass"][0])-2,
                    math.ceil(distribution["mass"][-1])+2))
plt.figure(figsize=(10,7))
plt.subplot(1,2,1)
plt.title("Isotopic distribution of oxygen")
plotdistribution(o_isoDist)
plt.xlabel("Atomic mass (u)")
plt.ylabel("Relative abundance (%)")

plt.subplot(1,2,2)
plt.title("Isotopic distribution of sulfur")
plotdistribution(s_isoDist)
plt.xlabel("Atomic mass (u)")
plt.ylabel("Relative abundance (%)")
plt.show()

#Mass Defect
from pyopenms import *
edb= ElementDB()
isotopes=edb.getElement("C").getIsotopeDistribution().getContainer()
carbon_isotop_difference= isotopes[1].getMZ() - isotopes[0].getMZ()

isotopes=edb.getElement("N").getIsotopeDistribution().getContainer()
nitrogen_isotop_difference= isotopes[1].getMZ() - isotopes[0].getMZ()
print("Mass difference between 12C and 13C:",carbon_isotop_difference)
print("Mass difference between 12C and 13C:",nitrogen_isotop_difference)
print("Relative deviation:",100*(carbon_isotop_difference -
                                 nitrogen_isotop_difference)/carbon_isotop_difference,"%")
                                 
 
 from pyopenms.Constants import*
from pyopenms import *
helium= ElementDB().getElement("He")
isotopes=helium.getIsotopeDistribution()
mass_sum=2*PROTON_MASS_U +2*ELECTRON_MASS_U+2*NEUTRON_MASS_U
helium4=isotopes.getContainer()[1].getMZ()
print("Sum of masses of 2 protons,neutrons and electrons:",mass_sum)
print("Mass of He4",helium4)
print("Difference between the two masses ",100*(mass_sum-helium4)/mass_sum,"%")


#Molecular Formulae
methanol=EmpiricalFormula("CH3OH")
water=EmpiricalFormula("H2O")
ethanol=EmpiricalFormula("CH2")+methanol
print("Ethanol chemical formula:",ethanol.toString())
print("Ethanol composition:",ethanol.getElementalComposition())
print("Ethanol has",ethanol.getElementalComposition()[b"H"],"hydrogen atoms")


#Istopic Distributions
methanol=EmpiricalFormula("CH3OH")
ethanol=EmpiricalFormula("CH2")+methanol
methanol_isoDist={"mass":[],"abundance":[]}
ethanol_isoDist={"mass":[],"abundance":[]}
print("Coarse Isotope Distribution:")
isotopes=ethanol.getIsotopeDistribution(CoarseIsotopePatternGenerator(4))
prob_sum =sum([iso.getIntensity() for iso in isotopes.getContainer()])
print("This covers",prob_sum,"probability")
for iso in isotopes.getContainer():
    print("Isotope",iso.getMZ(),"has abundance",iso.getIntensity()*100,"%")
    methanol_isoDist["mass"].append(iso.getMZ())
    methanol_isoDist["abundance"].append((iso.getIntensity()*100))
    
print("Fine Isotope Distribution:")
isotopes=ethanol.getIsotopeDistribution(FineIsotopePatternGenerator(1e-3))
prob_sum =sum([iso.getIntensity() for iso in isotopes.getContainer()])
print("This covers",prob_sum,"probability")
for iso in isotopes.getContainer():
    print("Isotope",iso.getMZ(),"has abundance",iso.getIntensity()*100,"%")
    methanol_isoDist["mass"].append(iso.getMZ())
    methanol_isoDist["abundance"].append((iso.getIntensity()*100))
    
    
    methanol=EmpiricalFormula("CH3OH")
ethanol=EmpiricalFormula("CH2")+methanol
print("Fine Isotope Distribution:")
isotopes=ethanol.getIsotopeDistribution(FineIsotopePatternGenerator(1e-6))
prob_sum =sum([iso.getIntensity() for iso in isotopes.getContainer()])
print("This covers",prob_sum,"probability")
for iso in isotopes.getContainer():
    print("Isotope",iso.getMZ(),"has abundance",iso.getIntensity()*100,"%")
    
    
    
    
isotopes=ethanol.getIsotopeDistribution(CoarseIsotopePatternGenerator(5,True))
for iso in isotopes.getContainer():
    print("Isotope",iso.getMZ(),"has abundance",iso.getIntensity()*100,"%")


#Amino Acids
lys=ResidueDB().getResidue("Lysine")
print(lys.getName())
print(lys.getThreeLetterCode())
print(lys.getOneLetterCode())
print(lys.getAverageWeight())
print(lys.getMonoWeight())
print(lys.getPka())
print(lys.getFormula().toString())


#Amino Acid Modifications
ox=ModificationsDB().getModification("Oxidation")
print(ox.getUniModAccession())
print(ox.getUniModRecordId())
print(ox.getDiffMonoMass())
print(ox.getId())
print(ox.getFullId())
print(ox.getFullName())
print(ox.getDiffFormula())



isotopes=ox.getDiffFormula().getIsotopeDistribution(CoarseIsotopePatternGenerator(5))
for iso in isotopes.getContainer():
    print("Isotope",iso.getMZ(),":",iso.getIntensity())
    
    
    
#Ribonucleotides
uridine=RibonucleotideDB().getRibonucleotide(b"U")
print(uridine.getName())
print(uridine.getCode())
print(uridine.getAvgMass())
print(uridine.getMonoMass())
print(uridine.getFormula().toString())
print(uridine.isModified())
methyladenosine=RibonucleotideDB().getRibonucleotide(b"m1A")
print(methyladenosine.getName())
print(methyladenosine.isModified())
